/*
 * Copyright (C) 2023 Mohamad Al-Jaf
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA
 */

#ifdef __WIDL__
#pragma winrt ns_prefix
#endif

import "inspectable.idl";
import "asyncinfo.idl";
import "eventtoken.idl";
import "windowscontracts.idl";
import "windows.foundation.idl";
import "windows.foundation.numerics.idl";
/* import "windows.graphics.idl"; */
import "windows.graphics.directx.idl";
import "windows.graphics.effects.idl";
import "windows.system.idl";
import "windows.ui.idl";
import "windows.ui.core.idl";

namespace Windows.UI.Composition {
    interface ICompositionBrush;
    interface ICompositionBrushFactory;
    interface ICompositionEasingFunction;
    interface ICompositionEasingFunctionFactory;
    interface ICompositionEasingFunctionStatics;
    interface ICompositionSurface;

    runtimeclass CompositionBrush;
    runtimeclass CompositionEasingFunction;
    runtimeclass CompositionObject;

    declare {
        interface Windows.Foundation.AsyncOperationCompletedHandler<Windows.UI.Composition.ICompositionSurface *>;
        interface Windows.Foundation.IAsyncOperation<Windows.UI.Composition.ICompositionSurface *>;
    }

    [
        contract(Windows.Foundation.UniversalApiContract, 2.0),
        exclusiveto(Windows.UI.Composition.CompositionBrush),
        uuid(ab0d7608-30c0-40e9-b568-b60a6bd1fb46)
    ]
    interface ICompositionBrush : IInspectable
    {
    }

    [
        contract(Windows.Foundation.UniversalApiContract, 2.0),
        exclusiveto(Windows.UI.Composition.CompositionBrush),
        uuid(da53fb4c-4650-47c4-ad76-765379607ed6)
    ]
    interface ICompositionBrushFactory : IInspectable
    {
    }

    [
        contract(Windows.Foundation.UniversalApiContract, 2.0),
        exclusiveto(Windows.UI.Composition.CompositionEasingFunction),
        uuid(5145e356-bf79-4ea8-8cc2-6b5b472e6c9a)
    ]
    interface ICompositionEasingFunction : IInspectable
    {
    }

    [
        contract(Windows.Foundation.UniversalApiContract, 2.0),
        exclusiveto(Windows.UI.Composition.CompositionEasingFunction),
        uuid(60840774-3da0-4949-8200-7206c00190a0)
    ]
    interface ICompositionEasingFunctionFactory : IInspectable
    {
    }

    [
        contract(Windows.Foundation.UniversalApiContract, 2.0),
        uuid(1527540d-42c7-47a6-a408-668f79a90dfb)
    ]
    interface ICompositionSurface : IInspectable
    {
    }

    [
        composable(Windows.UI.Composition.ICompositionBrushFactory, public, Windows.Foundation.UniversalApiContract, 2.0),
        contract(Windows.Foundation.UniversalApiContract, 2.0),
        marshaling_behavior(agile),
        threading(both)
    ]
    runtimeclass CompositionBrush : Windows.UI.Composition.CompositionObject
    {
        [default] interface Windows.UI.Composition.ICompositionBrush;
    }

    [
        composable(Windows.UI.Composition.ICompositionEasingFunctionFactory, public, Windows.Foundation.UniversalApiContract, 2.0),
        contract(Windows.Foundation.UniversalApiContract, 2.0),
        marshaling_behavior(agile),
        static(Windows.UI.Composition.ICompositionEasingFunctionStatics, Windows.Foundation.UniversalApiContract, 12.0),
        threading(both)
    ]
    runtimeclass CompositionEasingFunction : Windows.UI.Composition.CompositionObject
    {
        [default] interface Windows.UI.Composition.ICompositionEasingFunction;
    }
}
