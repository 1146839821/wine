/*
 * Copyright 2022 Ziqing Hui for CodeWeavers
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA
 */

 import "d2d1_1.idl";

typedef enum D2D1_FILTER
{
    D2D1_FILTER_MIN_MAG_MIP_POINT               = 0x00,
    D2D1_FILTER_MIN_MAG_POINT_MIP_LINEAR        = 0x01,
    D2D1_FILTER_MIN_POINT_MAG_LINEAR_MIP_POINT  = 0x04,
    D2D1_FILTER_MIN_POINT_MAG_MIP_LINEAR        = 0x05,
    D2D1_FILTER_MIN_LINEAR_MAG_MIP_POINT        = 0x10,
    D2D1_FILTER_MIN_LINEAR_MAG_POINT_MIP_LINEAR = 0x11,
    D2D1_FILTER_MIN_MAG_LINEAR_MIP_POINT        = 0x14,
    D2D1_FILTER_MIN_MAG_MIP_LINEAR              = 0x15,
    D2D1_FILTER_ANISOTROPIC                     = 0x55,
    D2D1_FILTER_FORCE_DWORD = 0xffffffff
} D2D1_FILTER;

typedef enum D2D1_CHANNEL_DEPTH
{
    D2D1_CHANNEL_DEPTH_DEFAULT = 0x0,
    D2D1_CHANNEL_DEPTH_1       = 0x1,
    D2D1_CHANNEL_DEPTH_4       = 0x4,
    D2D1_CHANNEL_DEPTH_FORCE_DWORD = 0xffffffff
} D2D1_CHANNEL_DEPTH;

typedef struct D2D1_INPUT_DESCRIPTION
{
    D2D1_FILTER filter;
    UINT32 levelOfDetailCount;
} D2D1_INPUT_DESCRIPTION;

[
    object,
    uuid(9b8b1336-00a5-4668-92b7-ced5d8bf9b7b),
    local,
]
interface ID2D1VertexBuffer : IUnknown
{
    HRESULT Map(
        [out] BYTE **data,
        [in] UINT32 size
    );
    HRESULT Unmap();
}

[
    object,
    uuid(688d15c3-02b0-438d-b13a-d1b44c32c39a),
    local,
]
interface ID2D1ResourceTexture : IUnknown
{
    HRESULT Update(
        [in] const UINT32 *min_extents,
        [in] const UINT32 *max_extents,
        [in] const UINT32 *strides,
        [in] UINT32 dimensions,
        [in] const BYTE *data,
        [in] UINT32 data_size
    );
}

[
    object,
    uuid(519ae1bd-d19a-420d-b849-364f594776b7),
    local,
]
interface ID2D1RenderInfo : IUnknown
{
    HRESULT SetInputDescription(
        [in] UINT32 index,
        [in] D2D1_INPUT_DESCRIPTION description
    );
    HRESULT SetOutputBuffer(
        [in] D2D1_BUFFER_PRECISION precision,
        [in] D2D1_CHANNEL_DEPTH depth
    );
    void SetCached(
        [in] BOOL is_cached
    );
    void SetInstructionCountHint(
        [in] UINT32 count
    );
}
